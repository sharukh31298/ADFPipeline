{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ubtiPBIMonitor"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DataflowRefreshesAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_API_Dataflowrefreshes",
					"type": "LinkedServiceReference",
					"parameters": {
						"WorkSpaceID": {
							"value": "@dataset().WorkSpaceID",
							"type": "Expression"
						},
						"DataFlowID": {
							"value": "@dataset().DataFlowID",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"WorkSpaceID": {
						"type": "String"
					},
					"DataFlowID": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetRefreshesAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_API_Datasetrefreshes",
					"type": "LinkedServiceReference",
					"parameters": {
						"WorkSpaceID": {
							"value": "@dataset().WorkSpaceID",
							"type": "Expression"
						},
						"DatasetID": {
							"value": "@dataset().DatasetID",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"WorkSpaceID": {
						"type": "String"
					},
					"DatasetID": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetUserHistory_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatasetuserHistory_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UBTI Datasets_Dev"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DatasetUserID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DatasetUserSourceKey",
						"type": "varchar"
					},
					{
						"name": "WorkSpaceID",
						"type": "varchar"
					},
					{
						"name": "DatasetID",
						"type": "varchar"
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "UserName",
						"type": "varchar"
					},
					{
						"name": "Identifier",
						"type": "varchar"
					},
					{
						"name": "UserType",
						"type": "varchar"
					},
					{
						"name": "DatasetUserAccessRight",
						"type": "varchar"
					},
					{
						"name": "PrincipalType",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "ModifiedBy",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DatasetUsersHistory"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetUsersAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_API_DatasetUsers",
					"type": "LinkedServiceReference",
					"parameters": {
						"WorkSpaceID": {
							"value": "@dataset().WorkSpaceID",
							"type": "Expression"
						},
						"DatasetID": {
							"value": "@dataset().DatasetID",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"WorkSpaceID": {
						"type": "String"
					},
					"DatasetID": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetUsers_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatasetUsers_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UBTI Datasets_Dev"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DatasetUserID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DatasetUserSourceKey",
						"type": "varchar"
					},
					{
						"name": "WorkSpaceID",
						"type": "varchar"
					},
					{
						"name": "DatasetID",
						"type": "varchar"
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "UserName",
						"type": "varchar"
					},
					{
						"name": "Identifier",
						"type": "varchar"
					},
					{
						"name": "UserType",
						"type": "varchar"
					},
					{
						"name": "DatasetUserAccessRight",
						"type": "varchar"
					},
					{
						"name": "PrincipalType",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "ModifiedBy",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DatasetUsers_Staging"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetsAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_API_Datasets",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ReportPagesAPI_Tenant2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Api_ReportPages",
					"type": "LinkedServiceReference",
					"parameters": {
						"WorkSpaceID": {
							"value": "@dataset().WorkSpaceID",
							"type": "Expression"
						},
						"ReportID": {
							"value": "@dataset().ReportID",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"WorkSpaceID": {
						"type": "String"
					},
					"ReportID": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Reports_API_Tenant2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Api_Reports",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Reports_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "getreports_sql_ds",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UBTI Datasets_Dev"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Reports"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Reports_SQL_History')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "getreports_sql_ds",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UBTI Datasets_Dev"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "ReportsHistory"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Reports_SQL_Staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "getreports_sql_ds",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UBTI Datasets_Dev"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ReportID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReportSourceKey",
						"type": "varchar"
					},
					{
						"name": "WorkSpaceID",
						"type": "varchar"
					},
					{
						"name": "DatasetID",
						"type": "varchar"
					},
					{
						"name": "ReportType",
						"type": "varchar"
					},
					{
						"name": "ReportName",
						"type": "varchar"
					},
					{
						"name": "ReportWebUrl",
						"type": "nvarchar"
					},
					{
						"name": "ReportEmbedUrl",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "ModifiedBy",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Reports_Staging"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ViewReportsAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_API_ViewReports",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WorkSpaceApI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_Api_Workspace",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_refresh_schedules_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RefreshSchedules_API",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RefreshSchedules_SQL",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     groupid as string,",
						"     datasetid as string",
						"}",
						"source(output(",
						"          body as ({@odata.context} as string, days as string[], enabled as boolean, localTimeZoneId as string, notifyOption as string, times as string[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source1",
						"source1 foldDown(unroll(body.days),",
						"     mapColumn(",
						"          days = body.days,",
						"          enabled = body.enabled,",
						"          localTimeZoneId = body.localTimeZoneId,",
						"          notifyOption = body.notifyOption,",
						"          times = body.times",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(times),",
						"     mapColumn(",
						"          days,",
						"          enabled,",
						"          localTimeZoneId,",
						"          notifyOption,",
						"          times",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 derive(groupid = $groupid,",
						"          datasetid = $datasetid) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          index_no as integer,",
						"          dataset_id as string,",
						"          workspace_id as string,",
						"          days as string,",
						"          times as string,",
						"          enabled as string,",
						"          localTimeZoneId as string,",
						"          notifyOption as string,",
						"          updated_time as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          dataset_id = datasetid,",
						"          workspace_id = groupid,",
						"          days,",
						"          times,",
						"          enabled,",
						"          localTimeZoneId,",
						"          notifyOption",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Capacities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Capacities Staging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Truncate Table dbo.Reports_Staging;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "ReportSourceKey",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['reportType']"
										},
										"sink": {
											"name": "ReportType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "ReportName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['webUrl']"
										},
										"sink": {
											"name": "ReportWebUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['embedUrl']"
										},
										"sink": {
											"name": "ReportEmbedUrl",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['datasetId']"
										},
										"sink": {
											"name": "DatasetID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['workspaceId']"
										},
										"sink": {
											"name": "WorkSpaceID",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['value']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "Capacities",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Reports_SQL_Staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capacities Live Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Capacities Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"CapacitiesSourceskey"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CapacitiesID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CapacitiesID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CapacitiesSourceskey",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CapacitiesSourceskey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DisplayName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DisplayName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Admins",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Admins",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Sku",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Sku",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "State",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CapacityUserAccessRight",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CapacityUserAccessRight",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Capacities_SQL_Live",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Capacities_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capacities History Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Capacities Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CapacitiesID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CapacitiesID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CapacitiesSourceskey",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CapacitiesSourceskey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DisplayName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DisplayName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Admins",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Admins",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Sku",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Sku",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "State",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CapacityUserAccessRight",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CapacityUserAccessRight",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Capacities_SQL_Live",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Capacities_History",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Sample Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-29T05:26:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Reports_SQL_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataFlowRefreshes_Batch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get DataFlow Batches",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute ChildPipelineLog",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT BatchNo, TenantId \nFROM [dbo].[DataFlows_batch] \nWHERE TenantId = ', string(pipeline().parameters.TenantId), \n' ORDER BY 1')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DataFlow_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Truncate Dataflow Refreshes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get DataFlow Batches').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If not max batch",
									"type": "IfCondition",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Execute Pipeline DataflowRefreshes",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@less(item().BatchNo,activity('Get DataFlow Batches').output.count)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Wait 1 Hour",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 3600
												}
											}
										]
									}
								},
								{
									"name": "Execute Pipeline DataflowRefreshes",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "DS_DataFlowRefreshes",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"AppTenantId": {
												"value": "@pipeline().parameters.AppTenantId",
												"type": "Expression"
											},
											"AppClientId": {
												"value": "@pipeline().parameters.AppClientId",
												"type": "Expression"
											},
											"AppClientCode": {
												"value": "@pipeline().parameters.AppClientCode",
												"type": "Expression"
											},
											"TenantId": {
												"value": "@pipeline().parameters.TenantId",
												"type": "Expression"
											},
											"BatchNo": {
												"value": "@item().BatchNo",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate Dataflow Refreshes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get DataFlow Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "getgroups_sql_ls",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE  [DataflowRefreshes_Staging]\nWHERE TenantId  = ', string(pipeline().parameters.TenantId))\n\n\n\n\n\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DataFlow Refreshes History",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataflowRefreshesSourcekey",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataflowRefreshesSourcekey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DataflowID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataflowID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataFlowRefreshes_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataFlowRefreshes_SQL_History",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capturing DataflowRefreshes Batches Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get DataFlow Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Get Dataflowsrefreshes Batch",
							"value": {
								"value": "@activity('Get DataFlow Batches').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Capturing DataflowRefreshes History Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DataFlow Refreshes History",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DataflowRefreshes History Status",
							"value": {
								"value": "@activity('DataFlow Refreshes History').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute ChildPipelineLog",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat (\n    'EXEC [dbo].[sp_ChildPipelineLog_Insert] ',\n    '''', 'Started', '''', ',',\n    '''', pipeline().Pipeline, '''', ',',\n    '''', pipeline().RunId, '''', ',',\n    '''', convertTimeZone(utcnow(),'UTC','India Standard Time'), '''', ',',\n    '''', '', '''', ',',\n    '''', pipeline().TriggerName, '''', ',',\n    '''', pipeline().TriggerType, '''', ',',\n    '''', pipeline().TriggerTime, '''', ',',\n    '''', ' ', '''', ',',\n    '''', pipeline().parameters.TenantId, '''', ',',\n    '''', ' ', '''', ',',\n    '''', ' ', ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Execute_ChildPipelineLogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Sp_TrackProcessSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Capturing DataflowRefreshes History Status",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "DataFlow Refreshes History",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ChildPipelineLog_Update]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"LogTrackerID": {
									"value": {
										"value": "@activity('Execute ChildPipelineLog').output.firstRow.LogTrackerID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@if(and(and(and(and(\nequals(variables('Get Dataflowsrefreshes Status'),'Succeeded'),\nequals(variables('DataflowRefreshes Staging Status'),'Succeeded')),\nequals(variables('DataflowRefreshesLive Status'),'Succeeded')),\nequals(variables('Get Dataflowsrefreshes Batch'),'Succeeded')),\nequals(variables('DataflowRefreshes History Status'),'Succeeded')),\n'Succeeded','Failed')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ADF_Pipeline_Status_Log",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"AppTenantId": {
						"type": "string"
					},
					"AppClientId": {
						"type": "string"
					},
					"AppClientCode": {
						"type": "string"
					},
					"TenantId": {
						"type": "int"
					}
				},
				"variables": {
					"CountWorkspace": {
						"type": "Integer"
					},
					"Get Dataflowsrefreshes Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Batch": {
						"type": "String"
					},
					"DataflowRefreshes History Status": {
						"type": "String"
					},
					"Master Workspaces Status": {
						"type": "String"
					},
					"Master WorkSpaceUsers Status": {
						"type": "String"
					},
					"Master Report status": {
						"type": "String"
					},
					"Master ReportPages Status": {
						"type": "String"
					},
					"Master Datasets Status": {
						"type": "String"
					},
					"Master Datasetfreshes status": {
						"type": "String"
					},
					"Master Datasetusers Status": {
						"type": "String"
					},
					"Master Viewreports Status": {
						"type": "String"
					},
					"Master Dataflows Status": {
						"type": "String"
					},
					"Master DataflowRefreshes Status": {
						"type": "String"
					},
					"DataflowRefreshes Staging Status": {
						"type": "String"
					},
					"DataflowRefreshesLive Status": {
						"type": "String"
					},
					"DataflowRefreshes Status": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dev_DailyScheduleChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-29T06:27:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataFlowRefreshes_Batch_UAT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get DataFlow Batches",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute ChildPipelineLog",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT BatchNo, TenantId \nFROM [dbo].[DataFlows_batch] \nWHERE TenantId = ', string(pipeline().parameters.TenantId), \n' ORDER BY 1')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DataflowLive_sql_UAT",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get DataFlow Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get DataFlow Batches').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline DataflowRefreshes",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "DS_DataFlowRefreshes_UAT",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"AppTenantId": {
												"value": "@pipeline().parameters.AppTenantId",
												"type": "Expression"
											},
											"AppClientId": {
												"value": "@pipeline().parameters.AppClientId",
												"type": "Expression"
											},
											"AppClientCode": {
												"value": "@pipeline().parameters.AppClientCode",
												"type": "Expression"
											},
											"TenantId": {
												"value": "@pipeline().parameters.TenantId",
												"type": "Expression"
											},
											"BatchNo": {
												"value": "@item().BatchNo",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate Dataflow Refreshes",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "Sql_DeleteQuery_UAT",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE  [DataflowRefreshes_Staging]\nWHERE TenantId  = ', string(pipeline().parameters.TenantId))\n\n\n\n\n\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DataFlow Refreshes History",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from [dbo].[DataflowRefreshes_Staging]\nwhere TenantId = ',string(pipeline().parameters.TenantId))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DataflowRefreshesID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DataflowRefreshesID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DataflowRefreshesSourcekey",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataflowRefreshesSourcekey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DataflowID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DataflowID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DataLoadTrackerID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "DataLoadTrackerID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataflowRefreshesStaging_sql_UAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataflowRefreshesHistory_sql_UAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capturing DataflowRefreshes Batches Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get DataFlow Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Get Dataflowsrefreshes Batch",
							"value": {
								"value": "@activity('Get DataFlow Batches').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Capturing DataflowRefreshes History Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DataFlow Refreshes History",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DataflowRefreshes History Status",
							"value": {
								"value": "@activity('DataFlow Refreshes History').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute ChildPipelineLog",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat (\n    'EXEC [dbo].[sp_ChildPipelineLog_Insert] ',\n    '''', 'Started', '''', ',',\n    '''', pipeline().Pipeline, '''', ',',\n    '''', pipeline().RunId, '''', ',',\n    '''', convertTimeZone(utcnow(),'UTC','India Standard Time'), '''', ',',\n    '''', '', '''', ',',\n    '''', pipeline().TriggerName, '''', ',',\n    '''', pipeline().TriggerType, '''', ',',\n    '''', pipeline().TriggerTime, '''', ',',\n    '''', ' ', '''', ',',\n    '''', pipeline().parameters.TenantId, '''', ',',\n    '''', ' ', '''', ',',\n    '''', ' ', ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Execute_UATChildpipelineLogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Sp_TrackProcessSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Capturing DataflowRefreshes History Status",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "DataFlow Refreshes History",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Capturing DataflowRefreshes Batches Status",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ChildPipelineLog_Update]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"LogTrackerID": {
									"value": {
										"value": "@activity('Execute ChildPipelineLog').output.firstRow.LogTrackerID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@if(and(\n\nequals(variables('Get Dataflowsrefreshes Batch'),'Succeeded'),\nequals(variables('DataflowRefreshes History Status'),'Succeeded')),\n'Succeeded','Failed')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Update_UATChildpipelineLogs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"AppTenantId": {
						"type": "string"
					},
					"AppClientId": {
						"type": "string"
					},
					"AppClientCode": {
						"type": "string"
					},
					"TenantId": {
						"type": "int"
					}
				},
				"variables": {
					"CountWorkspace": {
						"type": "Integer"
					},
					"Get Dataflowsrefreshes Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Batch": {
						"type": "String"
					},
					"DataflowRefreshes History Status": {
						"type": "String"
					},
					"Master Workspaces Status": {
						"type": "String"
					},
					"Master WorkSpaceUsers Status": {
						"type": "String"
					},
					"Master Report status": {
						"type": "String"
					},
					"Master ReportPages Status": {
						"type": "String"
					},
					"Master Datasets Status": {
						"type": "String"
					},
					"Master Datasetfreshes status": {
						"type": "String"
					},
					"Master Datasetusers Status": {
						"type": "String"
					},
					"Master Viewreports Status": {
						"type": "String"
					},
					"Master Dataflows Status": {
						"type": "String"
					},
					"Master DataflowRefreshes Status": {
						"type": "String"
					},
					"DataflowRefreshes Staging Status": {
						"type": "String"
					},
					"DataflowRefreshesLive Status": {
						"type": "String"
					},
					"DataflowRefreshes Status": {
						"type": "String"
					}
				},
				"folder": {
					"name": "UAT_DailyScheduleChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-29T06:27:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DatasetRefreshes_Batch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Dataset Batches",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute ChildPipelineLogs",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT BatchNo, TenantId \nFROM [dbo].[Dataset_batch] \nWHERE TenantId = ', string(pipeline().parameters.TenantId), \n' ORDER BY 1')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DatasetRefreshes_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Truncate Dataset Refreshes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Dataset Batches').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline DatasetRefreshes",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "DS_DatasetRefreshes",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"AppTenantId": {
												"value": "@pipeline().parameters.AppTenantId",
												"type": "Expression"
											},
											"AppClientId": {
												"value": "@pipeline().parameters.AppClientId",
												"type": "Expression"
											},
											"AppClientCode": {
												"value": "@pipeline().parameters.AppClientCode",
												"type": "Expression"
											},
											"TenantID": {
												"value": "@pipeline().parameters.TenantId",
												"type": "Expression"
											},
											"BatchNo": {
												"value": "@item().BatchNo",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate Dataset Refreshes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get Dataset Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "getgroups_sql_ls",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE  [dbo].[DatasetRefreshes_Staging]\nWHERE TenantId  = ', string(pipeline().parameters.TenantId))",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DatasetRefreshes History",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DatasetRefreshesSourceKey",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DatasetRefreshesSourceKey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DatasetID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DatasetID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "RequestId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RequestId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetRefreshes_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetRefreshes_SQL_History",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capturing Get DatasetRefreshes Batches",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Dataset Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Get DatasetsRefreshes Status",
							"value": {
								"value": "@activity('Get Dataset Batches').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Capturing DatasetRefreshes History status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DatasetRefreshes History",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatasetRefreshes History Status",
							"value": {
								"value": "@activity('DatasetRefreshes History').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute ChildPipelineLogs",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat (\n    'EXEC [dbo].[sp_ChildPipelineLog_Insert] ',\n    '''', 'Started', '''', ',',\n    '''', pipeline().Pipeline, '''', ',',\n    '''', pipeline().RunId, '''', ',',\n    '''', convertTimeZone(utcnow(),'UTC','India Standard Time'), '''', ',',\n    '''', '', '''', ',',\n    '''', pipeline().TriggerName, '''', ',',\n    '''', pipeline().TriggerType, '''', ',',\n    '''', pipeline().TriggerTime, '''', ',',\n    '''', ' ', '''', ',',\n    '''', pipeline().parameters.TenantId, '''', ',',\n    '''', ' ', '''', ',',\n    '''', ' ', ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Execute_ChildPipelineLogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Sp_TrackProcessSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Capturing DatasetRefreshes History status",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "DatasetRefreshes History",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ChildPipelineLog_Update]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"LogTrackerID": {
									"value": {
										"value": "@activity('Execute ChildPipelineLogs').output.firstRow.LogTrackerID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@if(and(and(and(and(\nequals(variables('Get DatasetRefreshe Status'),'Succeeded'),\nequals(variables('Dataset Refreshes Staging Status'),'Succeeded')),\nequals(variables('DatasetRefreshes Live Status'),'Succeeded')),\nequals(variables('Get DatasetsRefreshes Status'),'Succeeded')),\nequals(variables('DatasetRefreshes History Status'),'Succeeded')),\n'Succeeded','Failed')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ADF_Pipeline_Status_Log",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"AppTenantId": {
						"type": "string"
					},
					"AppClientId": {
						"type": "string"
					},
					"AppClientCode": {
						"type": "string"
					},
					"TenantId": {
						"type": "string"
					}
				},
				"variables": {
					"CountWorkspace": {
						"type": "Integer"
					},
					"Get DatasetsRefreshes Batch Status": {
						"type": "String"
					},
					"DatasetRefreshes History Status": {
						"type": "String"
					},
					"Dataflows Staging Status": {
						"type": "String"
					},
					"Dataflows Live Status": {
						"type": "String"
					},
					"Dataflows History Status": {
						"type": "String"
					},
					"DataflowRefreshes Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Batch": {
						"type": "String"
					},
					"DataflowRefreshes History Status": {
						"type": "String"
					},
					"Master Workspaces Status": {
						"type": "String"
					},
					"Master WorkSpaceUsers Status": {
						"type": "String"
					},
					"Master Report status": {
						"type": "String"
					},
					"Master ReportPages Status": {
						"type": "String"
					},
					"Master Datasets Status": {
						"type": "String"
					},
					"Master Datasetfreshes status": {
						"type": "String"
					},
					"Master Datasetusers Status": {
						"type": "String"
					},
					"Master Viewreports Status": {
						"type": "String"
					},
					"Master Dataflows Status": {
						"type": "String"
					},
					"Master DataflowRefreshes Status": {
						"type": "String"
					},
					"Get DatasetRefreshes_ Status": {
						"type": "String"
					},
					"Get DatasetRefreshe Status": {
						"type": "String"
					},
					"Dataset Refreshes Staging Status": {
						"type": "String"
					},
					"DatasetRefreshes Live Status": {
						"type": "String"
					},
					"Get DatasetsRefreshes Status": {
						"type": "String"
					},
					"DataflowRefreshesLive Status": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dev_DailyScheduleChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-29T06:27:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DatasetRefreshes_Batch_UAT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Dataset Batches",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute ChildPipelineLogs",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT DISTINCT BatchNo, TenantId \nFROM [dbo].[Dataset_batch] \nWHERE TenantId = ', string(pipeline().parameters.TenantId), \n' ORDER BY 1')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DatasetLive_sql_UAT",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Dataset Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Dataset Batches').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline DatasetRefreshes",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "DS_DatasetRefreshes_UAT",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"AppTenantId": {
												"value": "@pipeline().parameters.AppTenantId",
												"type": "Expression"
											},
											"AppClientId": {
												"value": "@pipeline().parameters.AppClientId",
												"type": "Expression"
											},
											"AppClientCode": {
												"value": "@pipeline().parameters.AppClientCode",
												"type": "Expression"
											},
											"TenantID": {
												"value": "@pipeline().parameters.TenantId",
												"type": "Expression"
											},
											"BatchNo": {
												"value": "@item().BatchNo",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Truncate Dataset Refreshes",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "Sql_DeleteQuery_UAT",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE  [dbo].[DatasetRefreshes_Staging]\nWHERE TenantId  = ', string(pipeline().parameters.TenantId))",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DatasetRefreshes History",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select * from [dbo].[DatasetRefreshes_Staging]\nwhere TenantId = ',string(pipeline().parameters.TenantId))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DatasetRefreshesSourceKey",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DatasetRefreshesSourceKey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DatasetID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DatasetID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RefreshType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "StartTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "EndTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "RequestId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RequestId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DataLoadTrackerID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "DataLoadTrackerID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetRefreshesStaging_sql_UAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetRefreshesHistory_sql_UAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capturing Get DatasetRefreshes Batches",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Dataset Batches",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Get DatasetsRefreshes Status",
							"value": {
								"value": "@activity('Get Dataset Batches').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Capturing DatasetRefreshes History status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DatasetRefreshes History",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatasetRefreshes History Status",
							"value": {
								"value": "@activity('DatasetRefreshes History').Status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute ChildPipelineLogs",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat (\n    'EXEC [dbo].[sp_ChildPipelineLog_Insert] ',\n    '''', 'Started', '''', ',',\n    '''', pipeline().Pipeline, '''', ',',\n    '''', pipeline().RunId, '''', ',',\n    '''', convertTimeZone(utcnow(),'UTC','India Standard Time'), '''', ',',\n    '''', '', '''', ',',\n    '''', pipeline().TriggerName, '''', ',',\n    '''', pipeline().TriggerType, '''', ',',\n    '''', pipeline().TriggerTime, '''', ',',\n    '''', ' ', '''', ',',\n    '''', pipeline().parameters.TenantId, '''', ',',\n    '''', ' ', '''', ',',\n    '''', ' ', ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Execute_UATChildpipelineLogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Sp_TrackProcessSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Capturing DatasetRefreshes History status",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "For Each Batch",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "DatasetRefreshes History",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ChildPipelineLog_Update]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"LogTrackerID": {
									"value": {
										"value": "@activity('Execute ChildPipelineLogs').output.firstRow.LogTrackerID",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@if(and(\n\nequals(variables('Get DatasetsRefreshes Status'),'Succeeded'),\nequals(variables('DatasetRefreshes History Status'),'Succeeded')),\n'Succeeded','Failed')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Update_UATChildpipelineLogs",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"AppTenantId": {
						"type": "string"
					},
					"AppClientId": {
						"type": "string"
					},
					"AppClientCode": {
						"type": "string"
					},
					"TenantId": {
						"type": "string"
					}
				},
				"variables": {
					"CountWorkspace": {
						"type": "Integer"
					},
					"Get DatasetsRefreshes Batch Status": {
						"type": "String"
					},
					"DatasetRefreshes History Status": {
						"type": "String"
					},
					"Dataflows Staging Status": {
						"type": "String"
					},
					"Dataflows Live Status": {
						"type": "String"
					},
					"Dataflows History Status": {
						"type": "String"
					},
					"DataflowRefreshes Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Batch": {
						"type": "String"
					},
					"DataflowRefreshes History Status": {
						"type": "String"
					},
					"Master Workspaces Status": {
						"type": "String"
					},
					"Master WorkSpaceUsers Status": {
						"type": "String"
					},
					"Master Report status": {
						"type": "String"
					},
					"Master ReportPages Status": {
						"type": "String"
					},
					"Master Datasets Status": {
						"type": "String"
					},
					"Master Datasetfreshes status": {
						"type": "String"
					},
					"Master Datasetusers Status": {
						"type": "String"
					},
					"Master Viewreports Status": {
						"type": "String"
					},
					"Master Dataflows Status": {
						"type": "String"
					},
					"Master DataflowRefreshes Status": {
						"type": "String"
					},
					"Get DatasetRefreshes_ Status": {
						"type": "String"
					},
					"Get DatasetRefreshe Status": {
						"type": "String"
					},
					"Dataset Refreshes Staging Status": {
						"type": "String"
					},
					"DatasetRefreshes Live Status": {
						"type": "String"
					},
					"Get DatasetsRefreshes Status": {
						"type": "String"
					},
					"DataflowRefreshesLive Status": {
						"type": "String"
					}
				},
				"folder": {
					"name": "UAT_DailyScheduleChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-29T06:27:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DatasetUsers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Datasets",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select WorkspaceId,DatasetSourceKey from [dbo].[Dataset_batch] \nwhere BatchNo = ',string(pipeline().parameters.BatchNo),\n'AND TenantId = ',string(pipeline().parameters.TenantId))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Dataset_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DatasetID in Loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Datasets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Datasets').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Get DatasetUsers_Staging",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"additionalColumns": [
												{
													"name": "DatasetID",
													"value": {
														"value": "@item().DatasetSourceKey",
														"type": "Expression"
													}
												},
												{
													"name": "WorkSpaceID",
													"value": {
														"value": "@item().WorkspaceId",
														"type": "Expression"
													}
												},
												{
													"name": "TenantId",
													"value": {
														"value": "@pipeline().parameters.TenantId",
														"type": "Expression"
													}
												}
											],
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": 4,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['datasetUserAccessRight']"
													},
													"sink": {
														"name": "DatasetUserAccessRight",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['identifier']"
													},
													"sink": {
														"name": "Identifier",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['principalType']"
													},
													"sink": {
														"name": "PrincipalType",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['DatasetID']"
													},
													"sink": {
														"name": "DatasetID",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['WorkSpaceID']"
													},
													"sink": {
														"name": "WorkSpaceID",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['TenantId']"
													},
													"sink": {
														"name": "TenantId",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['value']"
										}
									},
									"inputs": [
										{
											"referenceName": "DatasetUsers_API",
											"type": "DatasetReference",
											"parameters": {
												"DatasetID": {
													"value": "@item().DatasetSourceKey",
													"type": "Expression"
												},
												"AppTenantId": {
													"value": "@pipeline().parameters.AppTenantId",
													"type": "Expression"
												},
												"AppClientId": {
													"value": "@pipeline().parameters.AppClientId",
													"type": "Expression"
												},
												"AppClientCode": {
													"value": "@pipeline().parameters.AppClientCode",
													"type": "Expression"
												},
												"WorkspaceID": {
													"value": "@item().WorkspaceId",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DatasetUsers_sql",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Capturing DatasetUsers Staging Status",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get DatasetUsers_Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "DatasetUser Staging Status",
												"value": {
													"type": "Expression",
													"content": "@activity('Get DatasetUsers_Staging').Status"
												}
											}
										],
										"setSystemVariable": true
									}
								},
								{
									"name": "Capturing Datausers ED",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get DatasetUsers_Staging",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Sp_DatasetUsersED]",
										"storedProcedureParameters": {
											"AppClientId": {
												"value": {
													"value": "@pipeline().parameters.AppClientId",
													"type": "Expression"
												},
												"type": "String"
											},
											"AppClientSecret": {
												"value": {
													"value": "@pipeline().parameters.AppClientCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"AppTentantId": {
												"value": {
													"value": "@pipeline().parameters.AppTenantId",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataLoadTrackerId": {
												"value": "",
												"type": "String"
											},
											"DatasetID": {
												"value": {
													"value": "@item().DatasetSourceKey",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Get DatasetUsers_Staging').error?.message\r\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProcessEndTime": {
												"value": {
													"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ProcessStartTime": {
												"value": {
													"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Status": {
												"value": {
													"value": "@activity('Get DatasetUsers_Staging').Status",
													"type": "Expression"
												},
												"type": "String"
											},
											"TenantId": {
												"value": {
													"value": "@pipeline().parameters.TenantId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"WorkSpaceID": {
												"value": {
													"value": "@item().WorkspaceId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_Capturing DatasetUsers ED",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Sp_TrackProcessSuccess",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogADF_PipelineExecution]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"ErrorMessage": {
									"value": "NA",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"StartTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Status": {
									"value": {
										"value": "@if(and(and(and(and(\nequals(variables('Get Datasets Status'),'Succeeded'),\nequals(variables('DatasetUsers Staging Status'),'Succeeded')),\nequals(variables('DatasetUsers Live Status'),'Succeeded')),\nequals(variables('Datasets Batches Status'),'Succeeded')),\nequals(variables('DatasetUsers History Status'),'Succeeded')),\n'Succeeded','Failed')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								},
								"TenantID": {
									"value": {
										"value": "@pipeline().parameters.TenantId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ADF_Pipeline_Status_Log",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Sp_TrackProcessFailure",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogADF_PipelineExecution]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"StartTime": {
									"value": {
										"value": "@convertTimeZone(utcnow(),'UTC','India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Status": {
									"value": null,
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ADF_Pipeline_Status_Log",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Capturing Get Datasets Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Datasets",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "Get Datasets Status",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Datasets').Status"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Get DatasetUsers_Live",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "EXEC UpsertFromSourceToTarget;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DatasetUserSourceKey",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DatasetUserSourceKey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "WorkSpaceID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DatasetID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DatasetID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UserName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "UserName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Identifier",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Identifier",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UserType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "UserType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DatasetUserAccessRight",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DatasetUserAccessRight",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PrincipalType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PrincipalType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CreatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModifiedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "TenantId",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_DatasetUsers_Staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_DatasetUsersLive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Capturing DatasetUsers Live",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "InsertUpdate DatasetUsers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "DatasetUser Live Status",
									"value": {
										"type": "Expression",
										"content": "@activity('InsertUpdate DatasetUsers').Status"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "InsertUpdate DatasetUsers",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DatasetID in Loop",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "InserUpdate DatasetUsers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "EXEC DatasetUsers_InsertUpsert"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"AppTenantId": {
						"type": "string"
					},
					"AppClientId": {
						"type": "string"
					},
					"AppClientCode": {
						"type": "string"
					},
					"TenantId": {
						"type": "int"
					},
					"BatchNo": {
						"type": "string",
						"defaultValue": "@item().BatchNo"
					}
				},
				"variables": {
					"DatasetUsers_Status": {
						"type": "String"
					},
					"DatasetUsers_StartTime": {
						"type": "String"
					},
					"DatasetUsers_EndTime": {
						"type": "String"
					},
					"DatasetUsers_IST": {
						"type": "String"
					},
					"DatasetUsers_IST2": {
						"type": "String"
					},
					"LID": {
						"type": "Integer"
					},
					"LogID": {
						"type": "Integer"
					},
					"DatasetUsers Staging Status": {
						"type": "String"
					},
					"DatasetUsers Live Status": {
						"type": "String"
					},
					"Datasets Batches Status": {
						"type": "String"
					},
					"DatasetUsers History Status": {
						"type": "String"
					},
					"Get Datasets Status": {
						"type": "String"
					},
					"Dataset staging Status": {
						"type": "String"
					},
					"Dataset Live Status": {
						"type": "String"
					},
					"Dataset History Status": {
						"type": "String"
					},
					"Get DatasetRefreshes Status": {
						"type": "String"
					},
					"Get DatasetsRefreshes Batch Status": {
						"type": "String"
					},
					"DatasetRefreshes History Status": {
						"type": "String"
					},
					"Dataflows Staging Status": {
						"type": "String"
					},
					"Dataflows Live Status": {
						"type": "String"
					},
					"Dataflows History Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Status": {
						"type": "String"
					},
					"Get Dataflowsrefreshes Batch": {
						"type": "String"
					},
					"DataflowRefreshes History Status": {
						"type": "String"
					},
					"Master Workspaces Status": {
						"type": "String"
					},
					"Master WorkSpaceUsers Status": {
						"type": "String"
					},
					"Master Report status": {
						"type": "String"
					},
					"Master ReportPages Status": {
						"type": "String"
					},
					"Master Datasets Status": {
						"type": "String"
					},
					"Master Datasetfreshes status": {
						"type": "String"
					},
					"Master Datasetusers Status": {
						"type": "String"
					},
					"Master Viewreports Status": {
						"type": "String"
					},
					"Master Dataflows Status": {
						"type": "String"
					},
					"Master DataflowRefreshes Status": {
						"type": "String"
					},
					"DatasetUser Staging Status": {
						"type": "String"
					},
					"DatasetUser Live Status": {
						"type": "String"
					},
					"Get DatasetRefreshes_ Status": {
						"type": "String"
					},
					"Get DatasetRefreshe Status": {
						"type": "String"
					},
					"Get DatasetsRefreshes Status": {
						"type": "String"
					},
					"DataflowRefreshesLive Status": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dev_DailyScheduleChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-29T06:27:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetUsers_sql')]"
			]
		}
	]
}